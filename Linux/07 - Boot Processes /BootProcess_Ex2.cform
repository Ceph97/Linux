{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description" : "1 VPC with public (with IGW) & private (local route) subnets. EC2 in both subnets. ",
    "Parameters": {
        "EC2KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.large"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "myVPCIDCIDRRange": {
            "Description": "The IP address range for your new VPC.",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.0.0/16",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "EC2PrivateSubnetCIDRRange": {
            "Description": "The IP address range for a subnet in PrivateSunet.",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.0.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "EC2PublicSubnetCIDRRange": {
            "Description": "The IP address range for a subnet in myVPC.",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.1.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
        "AWSRegionToAMI": {
            "eu-north-1" : { "AML2" :"ami-0b7a46b4bd694e8a6" },
            "ap-south-1" : { "AML2" :"ami-0470e33cd681b2476" },
            "eu-west-3" : { "AML2" :"ami-00077e3fed5089981" },
            "eu-west-2" : { "AML2" :"ami-01a6e31ac994bbc09" },
            "eu-west-1" : { "AML2" :"ami-06ce3edf0cff21f07" },
            "ap-northeast-3" : { "AML2" :"ami-028238ef8d1df506f" },
            "ap-northeast-2" : { "AML2" :"ami-01288945bd24ed49a" },
            "ap-northeast-1" : { "AML2" :"ami-0f310fced6141e627" },
            "sa-east-1" : { "AML2" :"ami-003449ffb2605a74c" },
            "ca-central-1" : { "AML2" :"ami-054362537f5132ce2" },
            "ap-southeast-1" : { "AML2" :"ami-0ec225b5e01ccb706" },
            "ap-southeast-2" : { "AML2" :"ami-0970010f37c4f9c8d" },
            "eu-central-1" : { "AML2" :"ami-076431be05aaf8080" },
            "us-east-1" : { "AML2" :"ami-0323c3dd2da7fb37d" },
            "us-east-2" : { "AML2" :"ami-0f7919c33c90f5b58" },
            "us-west-1" : { "AML2" :"ami-06fcc1f0bc2c8943f" },
            "us-west-2" : { "AML2" :"ami-0d6621c01e8c2de2c" }
        }
    },
    "Resources": {
        "myVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {"Ref": "myVPCIDCIDRRange"},
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "InstanceTenancy": "default"
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {"Ref": "EC2PublicSubnetCIDRRange"},
                "VpcId": {
                    "Ref": "myVPC"
                }
            }
        },
        "myInternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "myVPC"
                },
                "InternetGatewayId": {
                    "Ref": "myInternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "myVPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "myInternetGateway"
                }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "myPublicEC2SecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Public instance security group",
                "VpcId" : { "Ref" : "myVPC" },
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
                ]
            }
        },
        "myInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "NetworkInterfaces": [ {
                    "AssociatePublicIpAddress": "true",
                    "DeviceIndex": "0",
                    "GroupSet": [{ "Ref" : "myPublicEC2SecurityGroup" }],
                    "SubnetId": { "Ref" : "PublicSubnet" }
                } ],
                "KeyName": {
                    "Ref": "EC2KeyPairName"
                },
                "InstanceType": { "Ref" : "InstanceType"},
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionToAMI",
                        {"Ref": "AWS::Region"},
                        "AML2"
                    ]
                },
                "IamInstanceProfile" :  {"Ref" : "iamInstanceProfile"}
            }
        },
        "SsmInstanceRole": {
           "Type": "AWS::IAM::Role",
           "Properties": {
              "AssumeRolePolicyDocument": { 
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
              "ManagedPolicyArns": [
                        "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
               ],
              "Path": "/"
           }
        },
        "iamInstanceProfile": {
              "Type": "AWS::IAM::InstanceProfile",
              "Properties": {
                 "Path": "/",
                 "Roles": [ { "Ref" :  "SsmInstanceRole"} ]
              }
        },
        "LambdaExecutionRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                 "AssumeRolePolicyDocument": { 
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                  },
                 "Path": "/",
                 "Policies": [ 
                 {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "ssm:SendCommand"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    } ]
              }
        },
        "LambdaBreakInstance" :{
          "Type" : "AWS::Lambda::Function",
          "Properties" : {
              "Description" : "Lambda code that sends SSM command to EC2 instance to create large files",
              "Handler" : "index.handler",
              "MemorySize" : 128,
              "Role" : { "Fn::GetAtt" : ["LambdaExecutionRole","Arn"]},
              "Runtime" : "python3.6",
              "Timeout" : 300,
              "Code" : {
                "ZipFile" :{ "Fn::Join":[
                    "",
                    [
                        "import boto3\n",
                        "import logging\n",
                        "import json\n",
                        "import cfnresponse\n",
                        "import time\n",
                        "\n",
                        "logger = logging.getLogger()\n",
                        "logger.setLevel(logging.DEBUG)\n",
                        "client = boto3.client('ssm')\n",
                        "\n",
                        "def handler(event, context):\n",
                        "   logger.debug(\"Received event: \" + json.dumps(event))\n",
                        "\n",
                        "   try:\n",
                        "       if event['RequestType'] == 'Create':\n",
                        "           instance_id = event['ResourceProperties']['InstanceId']\n",
                        "           logger.info(f\"Screwing instance and rebooting instance {instance_id} in 4 minutes\")\n",
                        "           time.sleep(240)\n",
                        "           client.send_command(InstanceIds=[instance_id],DocumentName='AWS-RunShellScript',Parameters={'commands': ['uuid=$(cat /etc/fstab | grep UUID | cut -d\" \" -f1)', 'new_uuid=${uuid::-2}', 'sed -i \"s/$uuid/$new_uuid/g\" /etc/fstab','reboot']})\n",
                        "\n",
                        "       cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['ResourceProperties']['InstanceId'])\n",
                        "   except Exception as e:\n",
                        "       logger.error(e)\n",
                        "       cfnresponse.send(event, context, cfnresponse.FAILED, {}, \"\")"

                    ]
                ]}
              }
            }
        },
        "BreakInstance" :{
            "Type" : "Custom::BreakInstance",
            "Properties":{
                "ServiceToken" : { "Fn::GetAtt" : ["LambdaBreakInstance","Arn"]},
                "InstanceId" : {"Ref" : "myInstance"}
            }        
        }   
    }
}